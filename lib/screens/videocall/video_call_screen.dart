import 'package:agora_rtc_engine/agora_rtc_engine.dart';
import 'package:flutter/material.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:synpitarn/util/constant.dart';

class VideoCallScreen extends StatefulWidget {
  const VideoCallScreen({
    super.key,
    required this.channelId,
    required this.token,
  });
  final String channelId;
  final String token;

  @override
  State<VideoCallScreen> createState() => _VideoCallScreenState();
}

class _VideoCallScreenState extends State<VideoCallScreen> {
  late final RtcEngine _engine;
  int? _remoteUid;
  bool localUserJoined = false;
  bool _remoteUserJoined = false;
  bool _isMuted = false;
  bool _isCameraOff = false;
  bool _isReady = false;

  @override
  void initState() {
    initAgora();
    super.initState();
  }

  @override
  void dispose() {
    _dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (!_isReady) return Center(child: CircularProgressIndicator());
    return Scaffold(
      // appBar: AppBar(
      //   backgroundColor: Theme.of(context).colorScheme.inversePrimary,

      //   title: Text('dada'),
      // ),
      body: Stack(
        children: [
          // Center(child: _remoteVideo()),
          // Align(
          //   alignment: Alignment.topLeft,
          //   child: SizedBox(
          //     width: 120,
          //     height: 160,
          //     child:
          //         _isCameraOff
          //             ? Container(
          //               color: Colors.black,
          //               width: 120,
          //               height: 160,
          //               child: Center(
          //                 child: Icon(Icons.videocam_off, color: Colors.white),
          //               ),
          //             )
          //             : SizedBox(
          //               width: 120,
          //               height: 160,
          //               child: AgoraVideoView(
          //                 controller: VideoViewController(
          //                   rtcEngine: _engine!,
          //                   canvas: const VideoCanvas(uid: 0),
          //                 ),
          //               ),
          //             ),
          //   ),
          // ),
          _remoteUserJoined ? _remoteVideo() : _renderLocalPreview(),

          // Foreground: Small local preview when remote joined
          if (_remoteUserJoined)
            Positioned(
              top: 16,
              right: 16,
              width: 120,
              height: 160,
              child: ClipRRect(
                borderRadius: BorderRadius.circular(12),
                child: Container(
                  decoration: BoxDecoration(
                    border: Border.all(color: Colors.white, width: 2),
                  ),
                  child: _renderLocalPreview(),
                ),
              ),
            ),
          _toolbar(),
        ],
      ),
    );
  }

  Future<void> initAgora() async {
    await [Permission.microphone, Permission.camera].request();
    _engine = createAgoraRtcEngine();
    // Initialize RtcEngine and set the channel profile to communication
    await _engine?.initialize(
      const RtcEngineContext(
        appId: appId,
        channelProfile: ChannelProfileType.channelProfileCommunication,
      ),
    );
    // Enable the video module
    await _engine?.enableVideo();
    // Enable local video preview
    await _engine?.startPreview();
    await _engine?.joinChannel(
      // Join a channel using a temporary token and channel name
      token: widget.token,
      channelId: widget.channelId,
      options: const ChannelMediaOptions(
        // Automatically subscribe to all video streams
        autoSubscribeVideo: true,
        // Automatically subscribe to all audio streams
        autoSubscribeAudio: true,
        // Publish camera video
        publishCameraTrack: true,
        // Publish microphone audio
        publishMicrophoneTrack: true,
        // Set user role to clientRoleBroadcaster (broadcaster) or clientRoleAudience (audience)
        clientRoleType: ClientRoleType.clientRoleBroadcaster,
      ),
      uid:
          0, // When you set uid to 0, a user name is randomly generated by the engine
    );
    // Add an event handler
    _engine?.registerEventHandler(
      RtcEngineEventHandler(
        // Occurs when the local user joins the channel successfully
        onJoinChannelSuccess: (RtcConnection connection, int elapsed) {
          debugPrint("local user ${connection.localUid} joined");
          setState(() {
            // localUserJoined = true;
            print("Joined local user: ${connection.localUid}");
          });
        },
        // Occurs when a remote user join the channel
        onUserJoined: (RtcConnection connection, int remoteUid, int elapsed) {
          debugPrint("remote user $remoteUid joined");
          setState(() {
            _remoteUserJoined = true;
            _remoteUid = remoteUid;
          });
        },
        // Occurs when a remote user leaves the channel
        onUserOffline: (
          RtcConnection connection,
          int remoteUid,
          UserOfflineReasonType reason,
        ) {
          debugPrint("remote user $remoteUid left channel");
          setState(() {
            _remoteUid = null;
            _remoteUserJoined = false;
          });
        },
      ),
    );
    setState(() {
      _isReady = true;
    });
  }

  Widget _renderLocalPreview() {
    return AgoraVideoView(
      controller: VideoViewController(
        rtcEngine: _engine,
        canvas: const VideoCanvas(uid: 0),
      ),
    );
  }

  // Widget to display remote video
  Widget _remoteVideo() {
    if (_remoteUid != null) {
      return AgoraVideoView(
        controller: VideoViewController.remote(
          rtcEngine: _engine!,
          canvas: VideoCanvas(uid: _remoteUid),
          connection: RtcConnection(channelId: widget.channelId),
        ),
      );
    } else {
      return const Text(
        'Please wait for remote user to join',
        textAlign: TextAlign.center,
      );
    }
  }

  Widget _toolbar() {
    return Align(
      alignment: Alignment.bottomCenter,
      child: Padding(
        padding: const EdgeInsets.only(bottom: 24.0),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Mute/unmute button
            RawMaterialButton(
              onPressed: _onToggleMute,
              child: Icon(
                _isMuted ? Icons.mic_off : Icons.mic,
                color: _isMuted ? Colors.white : Colors.blueAccent,
                size: 20.0,
              ),
              shape: CircleBorder(),
              elevation: 2.0,
              fillColor: _isMuted ? Colors.blueAccent : Colors.white,
              padding: const EdgeInsets.all(12.0),
            ),
            // End call button
            RawMaterialButton(
              onPressed: _onCallEnd,
              child: const Icon(
                Icons.call_end,
                color: Colors.white,
                size: 35.0,
              ),
              shape: const CircleBorder(),
              elevation: 2.0,
              fillColor: Colors.redAccent,
              padding: const EdgeInsets.all(15.0),
            ),
            // Camera toggle
            RawMaterialButton(
              onPressed: _onToggleCamera,
              child: Icon(
                _isCameraOff ? Icons.videocam_off : Icons.videocam,
                color: _isCameraOff ? Colors.white : Colors.blueAccent,
                size: 20.0,
              ),
              shape: const CircleBorder(),
              elevation: 2.0,
              fillColor: _isCameraOff ? Colors.blueAccent : Colors.white,
              padding: const EdgeInsets.all(12.0),
            ),
          ],
        ),
      ),
    );
  }

  void _onToggleMute() {
    setState(() {
      _isMuted = !_isMuted;
    });
    _engine?.muteLocalAudioStream(_isMuted);
  }

  void _onToggleCamera() {
    setState(() {
      _isCameraOff = !_isCameraOff;
    });
    _engine?.muteLocalVideoStream(_isCameraOff); // true = camera off
  }

  void _onCallEnd() {
    _engine?.leaveChannel();
    Navigator.pop(context);
  }

  Future<void> _dispose() async {
    await _engine?.leaveChannel(); // Leave the channel
    await _engine?.release(); // Release resources
  }
}
