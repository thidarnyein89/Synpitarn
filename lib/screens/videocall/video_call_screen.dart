import 'package:agora_rtc_engine/agora_rtc_engine.dart';
import 'package:flutter/material.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:synpitarn/util/constant.dart';

class VideoCallScreen extends StatefulWidget {
  const VideoCallScreen({
    super.key,
    required this.channelId,
    required this.token,
    required this.callerId,
  });
  final String channelId;
  final String token;
  final String callerId;

  @override
  State<VideoCallScreen> createState() => _VideoCallScreenState();
}

class _VideoCallScreenState extends State<VideoCallScreen> {
  late final RtcEngine _engine;
  int? _remoteUid;
  bool localUserJoined = false;
  bool _remoteUserJoined = false;
  bool _isMuted = false;
  bool _isSpeakerOn = true;
  bool _isCameraOff = false;
  bool _isReady = false;

  @override
  void initState() {
    initAgora();
    super.initState();
  }

  @override
  void dispose() {
    _dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (!_isReady) return Center(child: CircularProgressIndicator());
    return Scaffold(
      body: Stack(
        children: [
          _remoteUserJoined ? _remoteVideo() : _renderLocalPreview(),
          if (_remoteUserJoined)
            Positioned(
              top: 16,
              left: 16,
              width: 120,
              height: 160,
              child: ClipRRect(
                borderRadius: BorderRadius.circular(12),
                child: Container(
                  decoration: BoxDecoration(
                    border: Border.all(color: Colors.white, width: 2),
                  ),
                  child: _renderLocalPreview(),
                ),
              ),
            ),
          Positioned(
            top: 30,
            right: 16,
            child: CircleAvatar(
              backgroundColor: Colors.grey.shade800,
              child: IconButton(
                icon: const Icon(Icons.cameraswitch, color: Colors.white),
                onPressed: () {
                  _engine.switchCamera();
                },
              ),
            ),
          ),
          _toolbar(),
        ],
      ),
    );
  }

  Future<void> initAgora() async {
    await [Permission.microphone, Permission.camera].request();
    _engine = createAgoraRtcEngine();
    // Initialize RtcEngine and set the channel profile to communication
    await _engine.initialize(
      const RtcEngineContext(
        appId: appId,
        channelProfile: ChannelProfileType.channelProfileCommunication,
      ),
    );
    // Enable the video module
    await _engine.enableVideo();
    // Enable local video preview
    await _engine.startPreview();
    await _engine.joinChannel(
      // Join a channel using a temporary token and channel name
      token: widget.token,
      channelId: widget.channelId,
      options: const ChannelMediaOptions(
        // Automatically subscribe to all video streams
        autoSubscribeVideo: true,
        // Automatically subscribe to all audio streams
        autoSubscribeAudio: true,
        // Publish camera video
        publishCameraTrack: true,
        // Publish microphone audio
        publishMicrophoneTrack: true,
        // Set user role to clientRoleBroadcaster (broadcaster) or clientRoleAudience (audience)
        clientRoleType: ClientRoleType.clientRoleBroadcaster,
      ),
      uid:
          0, // When you set uid to 0, a user name is randomly generated by the engine
    );
    // Add an event handler
    _engine?.registerEventHandler(
      RtcEngineEventHandler(
        // Occurs when the local user joins the channel successfully
        onJoinChannelSuccess: (RtcConnection connection, int elapsed) {
          debugPrint("local user ${connection.localUid} joined");
          setState(() {
            // localUserJoined = true;
            print("Joined local user: ${connection.localUid}");
          });
        },
        // Occurs when a remote user join the channel
        onUserJoined: (RtcConnection connection, int remoteUid, int elapsed) {
          debugPrint("remote user $remoteUid joined");
          setState(() {
            _remoteUserJoined = true;
            _remoteUid = remoteUid;
          });
        },
        // Occurs when a remote user leaves the channel
        onUserOffline: (
          RtcConnection connection,
          int remoteUid,
          UserOfflineReasonType reason,
        ) {
          debugPrint("remote user $remoteUid left channel");
          setState(() {
            _remoteUid = null;
            _remoteUserJoined = false;
          });
        },
      ),
    );
    setState(() {
      _isReady = true;
    });
  }

  Widget _renderLocalPreview() {
    if (_isCameraOff) {
      return Container(
        color: Colors.black,
        child: const Center(
          child: Icon(Icons.videocam_off, color: Colors.white, size: 48),
        ),
      );
    }

    return AgoraVideoView(
      controller: VideoViewController(
        rtcEngine: _engine,
        canvas: const VideoCanvas(uid: 0),
      ),
    );
  }

  // Widget to display remote video
  Widget _remoteVideo() {
    if (_remoteUid != null) {
      return AgoraVideoView(
        controller: VideoViewController.remote(
          rtcEngine: _engine!,
          canvas: VideoCanvas(uid: _remoteUid),
          connection: RtcConnection(channelId: widget.channelId),
        ),
      );
    } else {
      return const Text(
        'Please wait for remote user to join',
        textAlign: TextAlign.center,
      );
    }
  }

  Widget _toolbar() {
    return Align(
      alignment: Alignment.bottomCenter,
      child: Padding(
        padding: const EdgeInsets.only(bottom: 24.0),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,

          children: <Widget>[
            CircleAvatar(
              backgroundColor: Colors.grey.shade800,
              radius: 24,
              child: IconButton(
                icon: Icon(
                  _isMuted ? Icons.mic_off : Icons.mic,
                  color: Colors.white,
                ),
                onPressed: () {
                  setState(() {
                    _isMuted = !_isMuted;
                  });
                  _engine.muteLocalAudioStream(_isMuted);
                },
              ),
            ),

            // Speaker Button
            CircleAvatar(
              backgroundColor: Colors.grey.shade800,
              radius: 24,
              child: IconButton(
                icon: Icon(
                  _isSpeakerOn ? Icons.volume_up : Icons.volume_off,
                  color: Colors.white,
                ),
                onPressed: () async {
                  if (!localUserJoined) {
                    print("Engine not connected yet.");
                    return;
                  }
                  setState(() {
                    _isSpeakerOn = !_isSpeakerOn;
                  });
                  await _engine.setEnableSpeakerphone(_isSpeakerOn);
                },
              ),
            ),

            CircleAvatar(
              backgroundColor: Colors.grey.shade800,
              radius: 24,
              child: IconButton(
                icon: Icon(
                  _isCameraOff ? Icons.videocam_off : Icons.videocam,
                  color: Colors.white,
                ),
                onPressed: () async {
                  setState(() {
                    _isCameraOff = !_isCameraOff;
                  });

                  if (_isCameraOff) {
                    await _engine.muteLocalVideoStream(true); // Hide to remote
                    await _engine.stopPreview(); // Stop preview locally
                  } else {
                    await _engine.muteLocalVideoStream(false);
                    await _engine.startPreview(); // Restart preview
                  }
                },
              ),
            ),

            // End Call
            CircleAvatar(
              radius: 24,
              backgroundColor: Colors.red,
              child: IconButton(
                icon: const Icon(Icons.call_end, color: Colors.white),
                onPressed: () {
                  _engine.leaveChannel();
                  Navigator.pop(context);
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _dispose() async {
    await _engine.leaveChannel(); // Leave the channel
    await _engine.release(); // Release resources
  }
}
